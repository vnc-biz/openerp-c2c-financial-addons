-
  In order to check the Account_voucher module with multi-currency in OpenERP,
  I create two invoices in USD for the same customer and make its Payment in EUR based
  in 3 times on the currency rating on that particular date.
-
-
  I create currency USD in OpenERP for January of 1.333333 Rate
-
  !python {model: res.currency.rate}: |
    from datetime import datetime
    curr_id = self.pool.get('res.currency').search(cr, uid, [('name', '=', 'USD')])
    date = '%s-01-01' %(datetime.now().year)
    ids = self.search(cr, uid, [('currency_id', '=', curr_id), ('name', '=', date)])
    self.write(cr, uid, ids, {'rate': 1.2835})
-
  I create a bank journal with EUR as currency
-
  !record {model: account.journal, id: bank_journal_EUR}:
    name: Bank Journal(EUR)
    code: BEUR
    type: bank
    analytic_journal_id: account.sit
    sequence_id: account.sequence_bank_journal
    default_debit_account_id: account.cash
    default_credit_account_id: account.cash
    currency: base.EUR
    company_id: base.main_company
    view_id: account.account_journal_bank_view
-
  I create a bank journal with USD as currency
-
  !record {model: account.journal, id: bank_journal_USD}:
    name: Bank Journal(USD)
    code: BUSD
    type: bank
    analytic_journal_id: account.sit
    sequence_id: account.sequence_bank_journal
    default_debit_account_id: account.cash
    default_credit_account_id: account.cash
    currency: base.USD
    company_id: base.main_company
    view_id: account.account_journal_bank_view
-
  I set up some accounts for currency rate expense/income in my company
-
  !record {model: res.company, id: base.main_company}:
    property_expense_currency_exchange: account.o_expense
    property_income_currency_exchange: account.o_income

-
  I create new partner Tom Dom
-
  !record {model: res.partner, id: res_partner_tom0}:
    address:
      - city: paris
        country_id: base.fr
        name: Tom
        street: 11 rue Rockfeller
        type: invoice
        zip: '75016'
    name: Mr.Tom Dom



  ###########################
 #  Creating 2 invoices    # 
###########################
-
  I create the first invoice on 1st January for 100 USD 
-
  !record {model: account.invoice, id: account_first_usd_invoice_jan}:
    account_id: account.a_pay
    type : in_invoice
    address_contact_id: base.res_partner_address_3000
    address_invoice_id: base.res_partner_address_3000
    company_id: base.main_company
    currency_id: base.USD
    date_invoice: !eval "'%s-01-01' %(datetime.now().year)"
    period_id: account.period_1
    invoice_line:
      - account_id: account.a_expense
        name: '[PC1] Basic PC'
        price_unit: 100.0
        quantity: 1.0
        product_id: product.product_product_pc1
        uos_id: product.product_uom_unit
    journal_id: account.sales_journal
    partner_id: res_partner_tom0
    reference_type: none
    check_total : 100
-
  I Validate the 1st invoice by clicking on Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_first_usd_invoice_jan}
-
  I check that first invoice move is correct for debtor account(debit - credit == -77.91)
-
  !python {model: account.invoice}: |
    invoice_id = self.browse(cr, uid, ref("account_first_usd_invoice_jan"))
    assert invoice_id.move_id, "Move not created for open invoice"
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (move_line.debit - move_line.credit == -77.91), "First invoice move is incorrect for debtors account " + str(move_line.debit - move_line.credit) + " instead of -77.91"
-
  I create the second invoice on 1st January for 50 USD
-
  !record {model: account.invoice, id: account_second_usd_invoice_jan}:
    account_id: account.a_pay
    type : in_invoice
    address_contact_id: base.res_partner_address_3000
    address_invoice_id: base.res_partner_address_3000
    company_id: base.main_company
    currency_id: base.USD
    date_invoice: !eval "'%s-01-01' %(datetime.now().year)"
    period_id: account.period_1
    invoice_line:
      - account_id: account.a_expense
        name: '[PC1] Basic PC'
        price_unit: 50.0
        quantity: 1.0
        product_id: product.product_product_pc1
        uos_id: product.product_uom_unit
    journal_id: account.sales_journal
    partner_id: res_partner_tom0
    reference_type: none
    check_total : 50.0
-
  I Validate the 2nd invoice by clicking on Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_second_usd_invoice_jan}
-
  I check that second invoice move is correct for debtor account(debit - credit == -38.96)
-
  !python {model: account.invoice}: |
    invoice_id = self.browse(cr, uid, ref("account_second_usd_invoice_jan"))
    assert invoice_id.move_id, "Move not created for open invoice"
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (move_line.debit - move_line.credit == -38.96), "Second invoice move is incorrect for debtors account " + str(move_line.debit - move_line.credit) + " instead of -38.96"



  ###########################
 #       1st voucher       # 
###########################
-
  I create the first voucher of payment
  <create with values 170 EUR, journal EUR, and fill amounts 80 for the invoice 1 and 30 for the invoice 2>
-
  !python {model: account.voucher}: |
    import netsvc, time
    vals = {}
    res = self.onchange_partner_id(cr, uid, [], ref("res_partner_tom0"), ref('bank_journal_USD'), 170.0, 2, ttype='payment', date=False)
    vals = {
        'account_id': ref('account.cash'),
        'amount': 170.0,
        'company_id': ref('base.main_company'),
        'currency_id': ref('base.EUR'),
        'journal_id': ref('bank_journal_EUR'),
        'partner_id': ref('res_partner_tom0'),
        'period_id': ref('account.period_3'),
        'type': 'payment',
        'date': time.strftime("%Y-01-01"),
        'payment_option': 'with_writeoff',
        'writeoff_acc_id': ref('account.a_expense'),
        'comment': 'Write Off',
        'name': 'First payment',
    }
    if not res['value']['line_dr_ids']:
        res['value']['line_dr_ids'] = [{'type': 'dr', 'account_id': ref('account.a_pay'),}]
    for item in res['value']['line_dr_ids']:
        if item['amount_unreconciled'] == 100.00:
            item['amount'] = 80.00
        else:
            item['amount'] = 30.00
    vals['line_dr_ids'] = [(0,0,i) for i in res['value']['line_dr_ids']]
    id = self.create(cr, uid, vals)
    voucher_id = self.browse(cr, uid, id)
    assert (voucher_id.state=='draft'), "Voucher is not in draft state"
    
-
  I check that writeoff amount computed is -84.2901667445847
-
  !python {model: account.voucher}: |
    import decimal_precision as dp
    decimals = dp.get_precision('Account')(cr)[1]
    
    v_wo_amnt = -84.2901667445847
    
    voucher = self.search(cr, uid, [('name', '=', 'First payment'), ('partner_id', '=', ref('res_partner_tom0'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    wo_amnt = round(voucher_id.writeoff_amount,decimals)
    v_wo_amnt = round(v_wo_amnt,decimals)
    assert (wo_amnt == v_wo_amnt), "Writeoff amount is %f insteed of %f" % (wo_amnt,v_wo_amnt)
-
  I check that currency rate difference is 0.00
-
  !python {model: account.voucher}: |
    import decimal_precision as dp
    decimals = dp.get_precision('Account')(cr)[1]
    voucher = self.search(cr, uid, [('name', '=', 'First payment'), ('partner_id', '=', ref('res_partner_tom0'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    curr_diff = round(voucher_id.currency_rate_difference,decimals)
    assert (curr_diff == 0.00), "Currency rate difference is not 0.00"
-
  I confirm the 1st voucher
-
  !python {model: account.voucher}: |
    import netsvc
    voucher = self.search(cr, uid, [('name', '=', 'First payment'), ('partner_id', '=', ref('res_partner_tom0'))])
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'account.voucher', voucher[0], 'proforma_voucher', cr)
-
  I check that the move of my voucher is valid
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'First payment'), ('partner_id', '=', ref('res_partner_tom0'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', voucher_id.move_id.id)])
    for move_line in move_line_obj.browse(cr, uid, move_lines):
        assert move_line.state == 'valid', "Voucher move is not valid"
    assert voucher_id.state == 'posted', "Voucher state is not posted"






-
  I check the residual amount of invoice 1 is 15.5836060464391 and residual amount currency is 20.0 
-
  !python {model: account.invoice}: |
    import decimal_precision as dp
    decimals = dp.get_precision('Account')(cr)[1]
    
    v_residual = 15.5836060464391
    v_residual_curcy = 20.0
    v_state = "open"
    invoice_name = "account_first_usd_invoice_jan"
    
    invoice_id = self.browse(cr, uid, ref(invoice_name))
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('invoice', '=', invoice_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    v_residual_curcy  = round(v_residual_curcy, decimals)
    residual_curcy = round(move_line.amount_residual_currency, decimals)
    assert ( residual_curcy == v_residual_curcy) , "Residual amount currency is %f instead of %f" %(residual_curcy, v_residual_curcy)
    v_residual = round(v_residual, decimals)
    residual = round(move_line.amount_residual, decimals)
    assert ( residual == v_residual) , "Residual amount is %f instead of %f" %(residual, v_residual)
    assert (invoice_id.state == v_state) , "Invoice is open"

-    
  I check the residual amount of invoice 2 is 15.5836060464391 and residual amount currency is 20.0
-
  !python {model: account.invoice}: |
    import decimal_precision as dp
    decimals = dp.get_precision('Account')(cr)[1]
    
    v_residual = 15.5836060464391
    v_residual_curcy = 20.0
    v_state = "open" 
    invoice_name = "account_second_usd_invoice_jan"
    
    invoice_id = self.browse(cr, uid, ref(invoice_name))
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('invoice', '=', invoice_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    v_residual_curcy  = round(v_residual_curcy, decimals)
    residual_curcy = round(move_line.amount_residual_currency, decimals)
    assert ( residual_curcy == v_residual_curcy) , "Residual amount currency is %f instead of %f" %(residual_curcy, v_residual_curcy)
    v_residual = round(v_residual, decimals)
    residual = round(move_line.amount_residual, decimals)
    assert ( residual == v_residual) , "Residual amount is %f instead of %f" %(residual, v_residual)
    assert (invoice_id.state == v_state) , "Invoice is open"







  ###########################
 #       2nd voucher       # 
###########################
-
  I create the second voucher of payment
  <create with values 10 EUR, journal EUR, and fill amounts 5 for the invoice 1 and 5 for the invoice 2>
-
  !python {model: account.voucher}: |
    import netsvc, time
    vals = {}
    res = self.onchange_partner_id(cr, uid, [], ref("res_partner_tom0"), ref('bank_journal_USD'), 10.0, 2, ttype='payment', date=False)
    vals = {
        'account_id': ref('account.cash'),
        'amount': 10.0,
        'company_id': ref('base.main_company'),
        'currency_id': ref('base.EUR'),
        'journal_id': ref('bank_journal_EUR'),
        'partner_id': ref('res_partner_tom0'),
        'period_id': ref('account.period_3'),
        'type': 'payment',
        'date': time.strftime("%Y-01-01"),
        'payment_option': 'with_writeoff',
        'writeoff_acc_id': ref('account.a_expense'),
        'comment': 'Write Off',
        'name': 'Second payment',
    }
    if not res['value']['line_dr_ids']:
      res['value']['line_dr_ids'] = [{'type': 'dr', 'account_id': ref('account.a_pay'),}]
    for item in res['value']['line_dr_ids']:
        item['amount'] = 5.00        
    vals['line_dr_ids'] = [(0,0,i) for i in res['value']['line_dr_ids']]
    id = self.create(cr, uid, vals)
    voucher_id = self.browse(cr, uid, id)
    assert (voucher_id.state=='draft'), "Voucher is not in draft state"
    
-
  I check that writeoff amount computed is -2.20819697678043
-
  !python {model: account.voucher}: |
    import decimal_precision as dp
    decimals = dp.get_precision('Account')(cr)[1]
    
    v_wo_amnt = -2.20819697678043
    
    voucher = self.search(cr, uid, [('name', '=', 'Second payment'), ('partner_id', '=', ref('res_partner_tom0'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    wo_amnt = round(voucher_id.writeoff_amount,decimals)
    v_wo_amnt = round(v_wo_amnt,decimals)
    assert (wo_amnt == v_wo_amnt), "Writeoff amount is %f insteed of %f" % (wo_amnt,v_wo_amnt)
-
  I check that currency rate difference is 0.00
-
  !python {model: account.voucher}: |
    import decimal_precision as dp
    decimals = dp.get_precision('Account')(cr)[1]
    voucher = self.search(cr, uid, [('name', '=', 'Second payment'), ('partner_id', '=', ref('res_partner_tom0'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    curr_diff = round(voucher_id.currency_rate_difference,decimals)
    assert (curr_diff == 0.00), "Currency rate difference is not 0.00"
-
  I confirm the 2nd voucher
-
  !python {model: account.voucher}: |
    import netsvc
    voucher = self.search(cr, uid, [('name', '=', 'Second payment'), ('partner_id', '=', ref('res_partner_tom0'))])
    print voucher
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'account.voucher', voucher[0], 'proforma_voucher', cr)
-
  I check that the move of my voucher is valid
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'Second payment'), ('partner_id', '=', ref('res_partner_tom0'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', voucher_id.move_id.id)])
    for move_line in move_line_obj.browse(cr, uid, move_lines):
        assert move_line.state == 'valid', "Voucher move is not valid"
    assert voucher_id.state == 'posted', "Voucher state is not posted"








-
  I check the residual amount of invoice 1 is 11.6877045348294 and residual amount currency is 15.0 
-
  !python {model: account.invoice}: |
    import decimal_precision as dp
    decimals = dp.get_precision('Account')(cr)[1]
    
    v_residual = 11.6877045348294
    v_residual_curcy = 15.0
    v_state = "open" 
    invoice_name = "account_first_usd_invoice_jan"
    
    invoice_id = self.browse(cr, uid, ref(invoice_name))
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('invoice', '=', invoice_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    v_residual_curcy  = round(v_residual_curcy, decimals)
    residual_curcy = round(move_line.amount_residual_currency, decimals)
    assert ( residual_curcy == v_residual_curcy) , "Residual amount currency is %f instead of %f" %(residual_curcy, v_residual_curcy)
    v_residual = round(v_residual, decimals)
    residual = round(move_line.amount_residual, decimals)
    assert ( residual == v_residual) , "Residual amount is %f instead of %f" %(residual, v_residual)
    assert (invoice_id.state == v_state) , "Invoice is open"

-    
  I check the residual amount of invoice 2 is 11.6877045348294 and residual amount currency is 15.0
-
  !python {model: account.invoice}: |
    import decimal_precision as dp
    decimals = dp.get_precision('Account')(cr)[1]
    
    v_residual = 11.6877045348294
    v_residual_curcy = 15.0
    v_state = "open" 
    invoice_name = "account_second_usd_invoice_jan"
    
    invoice_id = self.browse(cr, uid, ref(invoice_name))
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('invoice', '=', invoice_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    v_residual_curcy  = round(v_residual_curcy, decimals)
    residual_curcy = round(move_line.amount_residual_currency, decimals)
    assert ( residual_curcy == v_residual_curcy) , "Residual amount currency is %f instead of %f" %(residual_curcy, v_residual_curcy)
    v_residual = round(v_residual, decimals)
    residual = round(move_line.amount_residual, decimals)
    assert ( residual == v_residual) , "Residual amount is %f instead of %f" %(residual, v_residual)
    assert (invoice_id.state == v_state) , "Invoice is open"




  ###########################
 #       3rd voucher       # 
###########################
-
  I create the third voucher of payment
  <create with values 30 EUR, journal EUR, and fill amounts 15 for the invoice 1 and 15 for the invoice 2>
-
  !python {model: account.voucher}: |
    import netsvc, time
    vals = {}
    res = self.onchange_partner_id(cr, uid, [], ref("res_partner_tom0"), ref('bank_journal_USD'), 30.00, 2, ttype='payment', date=False)
    vals = {
        'account_id': ref('account.cash'),
        'amount': 30.00,
        'company_id': ref('base.main_company'),
        'currency_id': ref('base.EUR'),
        'journal_id': ref('bank_journal_EUR'),
        'partner_id': ref('res_partner_tom0'),
        'period_id': ref('account.period_3'),
        'type': 'payment',
        'date': time.strftime("%Y-01-01"),
        'payment_option': 'with_writeoff',
        'writeoff_acc_id': ref('account.a_expense'),
        'comment': 'Write Off',
        'name': 'Third payment',
    }
    if not res['value']['line_dr_ids']:
      res['value']['line_dr_ids'] = [{'type': 'dr', 'account_id': ref('account.a_pay'),}]
    for item in res['value']['line_dr_ids']:
        item['amount'] = 15.00
    vals['line_dr_ids'] = [(0,0,i) for i in res['value']['line_dr_ids']]
    id = self.create(cr, uid, vals)
    voucher_id = self.browse(cr, uid, id)
    assert (voucher_id.state=='draft'), "Voucher is not in draft state"
    
-
  I check that writeoff amount computed is -6.62459093034128
-
  !python {model: account.voucher}: |
    import decimal_precision as dp
    decimals = dp.get_precision('Account')(cr)[1]
    
    v_wo_amnt = -6.62459093034128
    
    voucher = self.search(cr, uid, [('name', '=', 'Third payment'), ('partner_id', '=', ref('res_partner_tom0'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    wo_amnt = round(voucher_id.writeoff_amount,decimals)
    v_wo_amnt = round(v_wo_amnt,decimals)
    assert (wo_amnt == v_wo_amnt), "Writeoff amount is %f insteed of %f" % (wo_amnt,v_wo_amnt)
    
-
  I check that currency rate difference is 0.00
-
  !python {model: account.voucher}: |
    import decimal_precision as dp
    decimals = dp.get_precision('Account')(cr)[1]
    
    voucher = self.search(cr, uid, [('name', '=', 'Third payment'), ('partner_id', '=', ref('res_partner_tom0'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    curr_diff = round(voucher_id.currency_rate_difference,decimals)
    assert (curr_diff == 0.00), "Currency rate difference is not 0.00"
-
  I confirm the 3rd voucher
-
  !python {model: account.voucher}: |
    import netsvc
    voucher = self.search(cr, uid, [('name', '=', 'Third payment'), ('partner_id', '=', ref('res_partner_tom0'))])
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'account.voucher', voucher[0], 'proforma_voucher', cr)
-
  I check that the move of my voucher is valid
-
  !python {model: account.voucher}: |
    voucher = self.search(cr, uid, [('name', '=', 'Third payment'), ('partner_id', '=', ref('res_partner_tom0'))])
    voucher_id = self.browse(cr, uid, voucher[0])
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', voucher_id.move_id.id)])
    for move_line in move_line_obj.browse(cr, uid, move_lines):
        assert move_line.state == 'valid', "Voucher move is not valid"
    assert voucher_id.state == 'posted', "Voucher state is not posted"
-
  I check the residual amount of invoice 1, should be 0 in residual currency and 0 in amount_residual and paid
-
  !python {model: account.invoice}: |
    invoice_id = self.browse(cr, uid, ref("account_first_usd_invoice_jan"))
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('invoice', '=', invoice_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (move_line.amount_residual_currency == 0.0 and move_line.amount_residual == 0.0 and invoice_id.state == 'paid') , "Residual amount is not correct for first Invoice"
-    
  I check the residual amount of invoice 2, should be 0 in residual currency and 0 in amount_residual and paid
-
   !python {model: account.invoice}: |
    invoice_id = self.browse(cr, uid, ref("account_second_usd_invoice_jan"))
    move_line_obj = self.pool.get('account.move.line')
    move_lines = move_line_obj.search(cr, uid, [('move_id', '=', invoice_id.move_id.id), ('invoice', '=', invoice_id.id), ('account_id', '=', invoice_id.account_id.id)])
    move_line = move_line_obj.browse(cr, uid, move_lines[0])
    assert (move_line.amount_residual_currency == 0.0 and move_line.amount_residual == 0.0 and invoice_id.state == 'paid') , "Residual amount is not correct for second Invoice"
  
